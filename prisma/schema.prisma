// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  password    String
  avatar      String?  // URL to avatar image
  role        String   @default("user") // user, moderator, admin
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  badges      String   @default("") // Earned badge slugs as JSON or CSV
  healthScore Int      @default(0)
  researches  Research[]
  uploads     Upload[]
  notifications Notification[]
  userChats   UserChat[]
}

model Research {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Upload {
  id        String   @id @default(uuid())
  filename  String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  text      String
  time      DateTime @default(now())
  read      Boolean  @default(false)
}

model UserChat {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  question  String
  answer    String
  summary   String? // JSON array of summary bullets
  time      DateTime @default(now())
}
